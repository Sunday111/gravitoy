layout (local_size_x = 1) in;

#ifndef NUM_BODIES
#define NUM_BODIES 2
#endif

const float BodyGravity = 1000.0;
uniform vec4 Bodies[NUM_BODIES];

const float ParticleMass = 0.1;
const float ParticleInvMass = 1.0 / ParticleMass;

const float MaxDist = 45.0;
uniform float u_delta_t = 0.000005;

layout(std430, binding=0) buffer Pos {
    vec4 Position[];
};

layout(std430, binding=1) buffer Vel {
    vec4 Velocity[];
};

vec3 forceByBody(vec3 position, vec3 body, float gravity) {
    vec3 position_to_body = body - position;
    float dist = length(position_to_body);
    vec3 dnorm = position_to_body / dist;
    vec3 force = (gravity / dist) * dnorm;
    return force;
}

void main() {
    uint idx = gl_GlobalInvocationID.x;

    vec3 p = Position[idx].xyz;

    // Compute gravitational force caused by bodies
    vec3 force = vec3(0, 0, 0);
    for (int i = 0; i != NUM_BODIES; ++i) {
        force += forceByBody(p, Bodies[i].xyz, BodyGravity);
    }

    // Apply simple Euler integrator
    vec3 a = force * ParticleInvMass;
    vec3 new_pos = p + Velocity[idx].xyz * u_delta_t + 0.5 * a * u_delta_t * u_delta_t;
    vec3 new_vel = Velocity[idx].xyz + a * u_delta_t;

    Position[idx].xyz = new_pos;

//    vec3[2] vel_opts;
//    vel_opts[0] = new_vel;
//    vel_opts[1] = new_vel + normalize(-new_pos);
//    Velocity[idx] = vel_opts[dot(p, p) > (MaxDist * MaxDist) ? 1 : 0];
    Velocity[idx].xyz = new_vel;
}
